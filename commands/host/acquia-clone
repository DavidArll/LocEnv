#!/usr/bin/env bash

## Description: Clone an Acquia environment into a new DDEV project or update an existing one.
## Usage: acquia-clone [environment]
## Example: ddev acquia-clone dev
## CanRunGlobally: true

set -e

# üìå Define paths
GLOBAL_CONFIG="$HOME/.ddev/global_config.yaml"
PROJECTS_JSON="$HOME/.ddev/acquia-projects.json"
PROJECTS_DIR="$HOME/Sites/ddev"
SITES_PATH="docroot/sites"
SITES_LOCAL_PHP="$SITES_PATH/sites.local.php"
SITES_PHP="$SITES_PATH/sites.php"

function verify_sites_php() {
  echo "üîÑ Verifying sites.php includes sites.local.php..."
  
  if [[ ! -f "$SITES_PHP" ]]; then
    echo "‚ùå Error: $SITES_PHP does not exist. This file is required."
    exit 1
  fi
  if [[ ! -f "$SITES_LOCAL_PHP" ]]; then
        echo "‚ùå Error: $SITES_LOCAL_PHP does not exist. This file is required."
        initialize_sites_local_php
  fi
  if ! grep -q 'if (file_exists(__DIR__ . "/sites.local.php")) {' "$SITES_PHP"; then
    echo "‚ö†Ô∏è  sites.local.php include block not found. Appending it to sites.php..."
    cat << 'EOF' >> "$SITES_PHP"

if (file_exists(__DIR__ . "/sites.local.php")) {
  require __DIR__ . "/sites.local.php";
}
EOF
  else
    echo "‚ÑπÔ∏è sites.local.php inclusion already present in sites.php. Skipping."
  fi

  echo "‚úÖ sites.php verification completed."
}


function initialize_sites_local_php() {

  if [[ ! -f "$SITES_LOCAL_PHP" ]]; then
    echo "üîß Generating sites.local.php file..."
    cat <<'EOF' > "$SITES_LOCAL_PHP"
<?php

/**
 * @file
 * Local multisite configuration for the project.
 *
 * This file defines the mapping between local domains and multisite directories.
 * It is used in DDEV-based local environments to route requests properly.
 *
 * Example:
 * $sites['example.ddev.site'] = 'example';
 *
 * @see https://www.drupal.org/docs/develop/local-development/using-local-development-environments
 */
EOF
    echo "‚úÖ sites.local.php created at $SITES_PATH"
  else
    echo "‚ÑπÔ∏è The sites.local.php file already exists. Skipping creation."
  fi
}


function check_port_availability() {
    echo "üîÑ Verificando disponibilidad del puerto 80..."
    if sudo lsof -i :80 &>/dev/null; then
        echo "‚ö†Ô∏è Warning: El puerto 80 est√° en uso. DDEV usar√° un puerto alternativo, pero esto podr√≠a afectar la salud del contenedor."
    else
        echo "‚úÖ Puerto 80 libre."
    fi
}

function verify_container_health() {
    echo "üîÑ Verificando salud de los contenedores..."
    sleep 10  
    HEALTH_STATUS=$(ddev describe -j | jq -r '.raw.services.web.health')
    if [[ "$HEALTH_STATUS" != "healthy" ]]; then
        echo "‚ùå Error: El contenedor web no est√° saludable. Verifica con:"
        echo "   ddev logs -s web"
        echo "   docker logs ddev-<project>-web"
        exit 1
    else
        echo "‚úÖ Contenedores saludables."
    fi
}
validate_env_data() {

    if [[ -z "$1" ]]; then
        echo "‚ö†Ô∏è Warning: No environment specified."
        echo "Please choose an environment:"
        echo "1: dev"
        echo "2: test"
        echo "3: prod"
        read -rp "Enter 1, 2, 3 or the environment name: " user_choice
        case "$user_choice" in
            1|dev|DEV) ENV_NAME="dev" ;;
            2|test|TEST) ENV_NAME="test" ;;
            3|prod|PROD) ENV_NAME="prod" ;;
            *) echo "Invalid selection, defaulting to 'dev'." ; ENV_NAME="dev" ;;
        esac
    else
        ENV_NAME=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    fi

    if [[ ! -f "$PROJECTS_JSON" ]]; then
        echo "‚ö†Ô∏è Warning: '$PROJECTS_JSON' does not exist. Running 'ddev acquia-sync-envs'..."
        ddev acquia-sync-envs
        if [[ ! -f "$PROJECTS_JSON" ]]; then
            echo "‚ùå Error: '$PROJECTS_JSON' still does not exist after syncing."
            exit 1
        fi
    fi

    ENV_DATA=$(jq -c --arg ENV_NAME "$ENV_NAME" '.projects[] | select(.environment_type == $ENV_NAME)' "$PROJECTS_JSON")
    if [[ -z "$ENV_DATA" ]]; then
        echo "‚ö†Ô∏è Warning: The environment '$ENV_NAME' does not exist in Acquia Cloud. Running 'ddev acquia-sync-envs' to refresh..."
        ddev acquia-sync-envs
        ENV_DATA=$(jq -c --arg ENV_NAME "$ENV_NAME" '.projects[] | select(.environment_type == $ENV_NAME)' "$PROJECTS_JSON")
        if [[ -z "$ENV_DATA" ]]; then
            echo "‚ùå Error: The environment '$ENV_NAME' still does not exist after syncing."
            exit 1
        fi
    fi

    export ENV_NAME
    export ENV_DATA
}

if ! command -v jq &> /dev/null; then
    echo "‚ö†Ô∏è Warning: 'jq' is not installed. Installing using brew..."
    brew install jq
fi

validate_env_data "$1"

# üìå Extract environment details
APP_NAME=$(echo "$ENV_DATA" | jq -r '.app_name')
ENVIRONMENT_ID=$(echo "$ENV_DATA" | jq -r '.environment_id')
PROJECT_PATH=$(echo "$ENV_DATA" | jq -r '.project_path')
BRANCH=$([ "$ENV_NAME" = "prod" ] && echo "main" || echo "$(echo "$ENV_DATA" | jq -r '.branch')")
REPO_URL=git@gitcode.acquia.com:MillerCoorsD8/millercoors-d8.git
SSH_URL=$(echo "$ENV_DATA" | jq -r '.ssh_url')

EXPECTED_PROJECT_PATH="$PROJECTS_DIR/${APP_NAME}-${ENV_NAME}"
if [[ -z "$PROJECT_PATH" ]]; then
    echo "‚ö†Ô∏è Warning: 'project_path' is empty in the JSON. Using EXPECTED_PROJECT_PATH: $EXPECTED_PROJECT_PATH"
    PROJECT_PATH="$EXPECTED_PROJECT_PATH"
fi

# üìå Check if project directory already exists
if [[ -d "$PROJECT_PATH" ]]; then
    echo "‚ö†Ô∏è The environment '$ENV_NAME' already exists at: $PROJECT_PATH"
    cd "$PROJECT_PATH"

    # üìå Check if it's a valid Git repository
    if [[ -d ".git" ]]; then
        echo "üîÑ Pulling latest changes from branch '$BRANCH'..."
        git checkout "$BRANCH"
        git pull origin "$BRANCH"
        echo "‚úÖ Code updated successfully!"
    else
        echo "‚ùå Error: The directory exists but is not a valid Git repository. Please check manually."
        exit 1
    fi

    # üìå Check if DDEV is already initialized
    if [[ -f ".ddev/config.yaml" ]]; then
        echo "‚úÖ DDEV is already configured. Restarting the environment..."
        ddev restart
    else
        echo "üöÄ DDEV is not configured. Initializing DDEV..."
        ddev config --project-type=drupal10 --php-version=8.3 --docroot=docroot
        ddev start
    fi

    # üìå Ensure the project path is correctly registered in the JSON
    echo "üîÑ Updating 'acquia-projects.json' with the correct project path..."
    jq --arg APP_NAME "$APP_NAME" --arg ENV_NAME "$ENV_NAME" --arg PROJECT_PATH "$PROJECT_PATH" \
        '(.projects[] | select(.app_name == $APP_NAME and .environment_type == $ENV_NAME)) .project_path = $PROJECT_PATH' \
        "$PROJECTS_JSON" > "$PROJECTS_JSON.tmp" && mv "$PROJECTS_JSON.tmp" "$PROJECTS_JSON"
    verify_sites_php
    echo "‚úÖ Environment '$ENV_NAME' is up to date and running at: $EXPECTED_PROJECT_PATH"
    exit 0
fi

# üìå Clone the repository if it doesn't exist
echo "üîÑ Cloning repository for '$ENV_NAME' into '$PROJECT_PATH'..."
mkdir -p "$PROJECT_PATH"
git clone --branch "$BRANCH" "$REPO_URL" "$PROJECT_PATH"

# üìå Enter the project directory
cd "$PROJECT_PATH"

# üìå Configure DDEV
echo "üöÄ Configuring DDEV for Drupal 10..."
ddev config --project-type=drupal10 --php-version=8.3 --docroot=docroot

# Verificar si el hook "composer: install" ya est√° presente
if ! grep -q "composer: install" .ddev/config.yaml; then
    cat << 'EOF' >> .ddev/config.yaml
hooks:
  post-start:
    - composer: install
EOF
else
    echo "‚ÑπÔ∏è Hook 'composer: install' already exists in .ddev/config.yaml, skipping addition."
fi

# üìå Start DDEV
echo "üöÄ Starting DDEV..."
check_port_availability
ddev start

# Verificar que los contenedores se hayan iniciado correctamente

verify_sites_php
verify_container_health


echo "üîÑ Updating 'acquia-projects.json' with the correct project path..."
jq --arg APP_NAME "$APP_NAME" --arg ENV_NAME "$ENV_NAME" --arg PROJECT_PATH "$PROJECT_PATH" \
    '(.projects[] | select(.app_name == $APP_NAME and .environment_type == $ENV_NAME)) .project_path = $PROJECT_PATH' \
    "$PROJECTS_JSON" > "$PROJECTS_JSON.tmp" && mv "$PROJECTS_JSON.tmp" "$PROJECTS_JSON"

# üìå Verify update success
UPDATED_PATH=$(jq -r --arg APP_NAME "$APP_NAME" --arg ENV_NAME "$ENV_NAME" \
    '(.projects[] | select(.app_name == $APP_NAME and .environment_type == $ENV_NAME)) | .project_path' \
    "$PROJECTS_JSON")
if [[ "$UPDATED_PATH" != "$PROJECT_PATH" && "$UPDATED_PATH" != "$EXPECTED_PROJECT_PATH" ]]; then
    echo "‚ùå Error: Failed to update 'acquia-projects.json'."
    exit 1
fi


echo "‚úÖ Cloning and configuration complete. You can access the project at: $EXPECTED_PROJECT_PATH"
