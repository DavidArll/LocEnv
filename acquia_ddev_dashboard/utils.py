import shutil # For `shutil.which` to find executables
import os # For path manipulation (expanduser, join, etc.)
import yaml # For parsing YAML configuration files
import json # For parsing JSON configuration files
import logging # For application-wide logging

# Configure basic logging for the utils module.
# This will be effective if the main application doesn't reconfigure logging.
# In a larger app, a shared logging config would be ideal.
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(module)s - %(message)s')

def find_ddev():
    """
    Checks if the 'ddev' command-line tool is available on the system's PATH.

    Returns:
        bool: True if 'ddev' is found, False otherwise.
    """
    return shutil.which('ddev') is not None

def get_home_dir():
    """
    Returns the user's home directory path in a cross-platform way.

    Returns:
        str: The absolute path to the user's home directory.
    """
    return os.path.expanduser("~")

def read_ddev_global_config():
    """
    Reads and parses the DDEV global configuration file (`$HOME/.ddev/global_config.yaml`).

    This file typically contains global settings for DDEV, including Acquia API credentials.

    Returns:
        dict or None: A dictionary representing the parsed YAML content if successful.
                      Returns a specific error dictionary if the file is not found, empty,
                      malformed, or if another reading error occurs.
                      Returns None if the file is empty and not considered an error by design.
    """
    home_dir = get_home_dir() # Get user's home directory.
    config_path = os.path.join(home_dir, '.ddev', 'global_config.yaml') # Path to global DDEV config.
    
    logging.debug(f"Attempting to read DDEV global config from: {config_path}")
    try:
        with open(config_path, 'r') as f:
            content = f.read()
            if not content.strip(): # Check if the file is empty or contains only whitespace.
                logging.warning(f"DDEV global config file is empty: {config_path}")
                return None # Or specific error dict if empty file is an issue: {'error': 'FILE_EMPTY', ...}
            # Attempt to parse the YAML content.
            return yaml.safe_load(content)
    except FileNotFoundError:
        # Log a warning if the file doesn't exist, as it's crucial for Acquia integration.
        logging.warning(f"DDEV global config file not found at {config_path}. This file is required for Acquia API credentials.")
        return {'error': 'DDEV_GLOBAL_CONFIG_NOT_FOUND', 'path': config_path, 'message': 'DDEV global config file not found.'}
    except yaml.YAMLError as e:
        # Log an error if the YAML is malformed.
        logging.error(f"Error parsing DDEV global config YAML file {config_path}: {e}")
        return {'error': 'DDEV_GLOBAL_CONFIG_INVALID_YAML', 'path': config_path, 'details': str(e), 'message': 'Invalid YAML format in DDEV global config.'}
    except Exception as e: # Catch any other unexpected errors during file reading or parsing.
        logging.error(f"Unexpected error reading DDEV global config file {config_path}: {e}")
        return {'error': 'DDEV_GLOBAL_CONFIG_READ_ERROR', 'path': config_path, 'details': str(e), 'message': 'Unexpected error reading DDEV global config.'}

def read_acquia_projects_json():
    """
    Reads and parses the Acquia projects JSON file (`$HOME/.ddev/acquia-projects.json`).

    This file is typically generated by `ddev acquia-sync-envs` and lists Acquia projects
    and their environments.

    Returns:
        dict or None: A dictionary representing the parsed JSON content if successful.
                      Returns a specific error dictionary if the file is not found, empty,
                      malformed, or if another reading error occurs.
                      Returns None if the file is empty by design (though usually it contains at least `{"projects": []}`).
    """
    home_dir = get_home_dir() # Get user's home directory.
    json_file_path = os.path.join(home_dir, '.ddev', 'acquia-projects.json') # Path to Acquia projects JSON.
    
    logging.debug(f"Attempting to read Acquia projects JSON from: {json_file_path}")
    try:
        with open(json_file_path, 'r') as f:
            content = f.read()
            if not content.strip(): # Check if the file is empty.
                logging.warning(f"Acquia projects JSON file is empty: {json_file_path}")
                # An empty file might be valid (e.g., no projects synced yet),
                # so returning an empty dict or None might be appropriate.
                # For consistency, returning None if empty, let calling code decide if it's an error.
                return None 
            # Attempt to parse the JSON content.
            return json.loads(content)
    except FileNotFoundError:
        # Log a warning if the file doesn't exist. Suggest how to create it.
        logging.warning(f"Acquia projects JSON file not found at {json_file_path}. Run 'ddev acquia-sync-envs' to generate it.")
        return {'error': 'ACQUIA_PROJECTS_JSON_NOT_FOUND', 'path': json_file_path, 'message': 'Acquia projects JSON file not found. Run `ddev acquia-sync-envs`.'}
    except json.JSONDecodeError as e:
        # Log an error if the JSON is malformed.
        logging.error(f"Error parsing Acquia projects JSON file {json_file_path}: {e}")
        return {'error': 'ACQUIA_PROJECTS_JSON_INVALID_JSON', 'path': json_file_path, 'details': str(e), 'message': 'Invalid JSON format in Acquia projects file.'}
    except Exception as e: # Catch any other unexpected errors.
        logging.error(f"Unexpected error reading Acquia projects JSON file {json_file_path}: {e}")
        return {'error': 'ACQUIA_PROJECTS_JSON_READ_ERROR', 'path': json_file_path, 'details': str(e), 'message': 'Unexpected error reading Acquia projects file.'}

if __name__ == '__main__':
    # Example usage when running this module directly (for testing purposes).
    print(f"DDEV found: {find_ddev()}")
    print(f"User's Home Directory: {get_home_dir()}")
    
    print("\n--- Reading DDEV Global Config ---")
    global_ddev_config = read_ddev_global_config()
    if global_ddev_config and not isinstance(global_ddev_config, dict) or 'error' not in global_ddev_config :
        print("DDEV Global Config Loaded:", json.dumps(global_ddev_config, indent=2))
    elif global_ddev_config: # It's an error dictionary
        print("Error reading DDEV Global Config:", global_ddev_config)
    else: # None was returned (e.g. empty file)
        print("DDEV Global Config was empty or None.")

    print("\n--- Reading Acquia Projects JSON ---")
    projects_json_data = read_acquia_projects_json()
    if projects_json_data and not isinstance(projects_json_data, dict) or 'error' not in projects_json_data:
        print("Acquia Projects JSON Loaded:", json.dumps(projects_json_data, indent=2))
    elif projects_json_data: # It's an error dictionary
        print("Error reading Acquia Projects JSON:", projects_json_data)
    else: # None was returned (e.g. empty file)
        print("Acquia Projects JSON was empty or None.")

def check_path_exists(path_string):
    """
    Checks if a given file or directory path exists on the filesystem.

    Args:
        path_string (str or None): The path string to check. Can be None.

    Returns:
        bool: True if the path exists, False if it does not exist or if path_string is None/empty.
    """
    if not path_string:
        return False
    return os.path.exists(path_string)
